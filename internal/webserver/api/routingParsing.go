// Code generated by updateApiRouting.go - DO NOT EDIT.
package api

import (
	"fmt"
	"net/http"
)

// Do not modify: This is an automatically generated file created by updateApiRouting.go
// It contains the code that is used to parse the headers submitted in an API request

// ParseRequest parses the header file. As paramFilesListSingle has no fields with the
// tag header, this method does nothing, except calling ProcessParameter()
func (p *paramFilesListSingle) ParseRequest(r *http.Request) error {
	return p.ProcessParameter(r)
}

// ParseRequest parses the header file. As paramFilesAdd has no fields with the
// tag header, this method does nothing, except calling ProcessParameter()
func (p *paramFilesAdd) ParseRequest(r *http.Request) error {
	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramFilesDuplicate struct
// In the end, ProcessParameter() is called
func (p *paramFilesDuplicate) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderString(r, "id", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header id supplied")
	}

	p.AllowedDownloads, err = parseHeaderInt(r, "allowedDownloads", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header allowedDownloads supplied")
	}

	p.ExpiryDays, err = parseHeaderInt(r, "expiryDays", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header expiryDays supplied")
	}

	p.Password, err = parseHeaderString(r, "password", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header password supplied")
	}

	p.KeepPassword, err = parseHeaderBool(r, "originalPassword", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header originalPassword supplied")
	}

	p.FileName, err = parseHeaderString(r, "filename", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header filename supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramFilesModify struct
// In the end, ProcessParameter() is called
func (p *paramFilesModify) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderString(r, "id", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header id supplied")
	}

	p.AllowedDownloads, err = parseHeaderInt(r, "allowedDownloads", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header allowedDownloads supplied")
	}

	p.ExpiryTimestamp, err = parseHeaderInt64(r, "expiryTimestamp", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header expiryTimestamp supplied")
	}

	p.Password, err = parseHeaderString(r, "password", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header password supplied")
	}

	p.KeepPassword, err = parseHeaderBool(r, "originalPassword", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header originalPassword supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramFilesReplace struct
// In the end, ProcessParameter() is called
func (p *paramFilesReplace) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderString(r, "id", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header id supplied")
	}

	p.IdNewContent, err = parseHeaderString(r, "idNewContent", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header idNewContent supplied")
	}

	p.Delete, err = parseHeaderBool(r, "deleteNewFile", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header deleteNewFile supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramFilesDelete struct
// In the end, ProcessParameter() is called
func (p *paramFilesDelete) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderString(r, "id", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header id supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramAuthCreate struct
// In the end, ProcessParameter() is called
func (p *paramAuthCreate) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.FriendlyName, err = parseHeaderString(r, "friendlyName", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header friendlyName supplied")
	}

	p.BasicPermissions, err = parseHeaderBool(r, "basicPermissions", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header basicPermissions supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramAuthFriendlyName struct
// In the end, ProcessParameter() is called
func (p *paramAuthFriendlyName) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.KeyId, err = parseHeaderString(r, "apiKeyToModify", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header apiKeyToModify supplied")
	}

	p.FriendlyName, err = parseHeaderString(r, "friendlyName", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header friendlyName supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramAuthModify struct
// In the end, ProcessParameter() is called
func (p *paramAuthModify) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.KeyId, err = parseHeaderString(r, "apiKeyToModify", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header apiKeyToModify supplied")
	}

	p.permissionRaw, err = parseHeaderString(r, "permission", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header permission supplied")
	}

	p.GrantPermission, err = parseHeaderBool(r, "permissionModifier", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header permissionModifier supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramAuthDelete struct
// In the end, ProcessParameter() is called
func (p *paramAuthDelete) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.KeyId, err = parseHeaderString(r, "apiKeyToModify", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header apiKeyToModify supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramUserCreate struct
// In the end, ProcessParameter() is called
func (p *paramUserCreate) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Username, err = parseHeaderString(r, "username", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header username supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramUserChangeRank struct
// In the end, ProcessParameter() is called
func (p *paramUserChangeRank) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderInt(r, "userid", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header userid supplied")
	}

	p.newRankRaw, err = parseHeaderString(r, "newRank", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header newRank supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramUserDelete struct
// In the end, ProcessParameter() is called
func (p *paramUserDelete) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderInt(r, "userid", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header userid supplied")
	}

	p.DeleteFiles, err = parseHeaderBool(r, "deleteFiles", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header deleteFiles supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramUserModify struct
// In the end, ProcessParameter() is called
func (p *paramUserModify) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderInt(r, "userid", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header userid supplied")
	}

	p.permissionRaw, err = parseHeaderString(r, "userpermission", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header userpermission supplied")
	}

	p.GrantPermission, err = parseHeaderBool(r, "permissionModifier", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header permissionModifier supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramUserResetPw struct
// In the end, ProcessParameter() is called
func (p *paramUserResetPw) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Id, err = parseHeaderInt(r, "userid", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header userid supplied")
	}

	p.NewPassword, err = parseHeaderBool(r, "generateNewPassword", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header generateNewPassword supplied")
	}

	return p.ProcessParameter(r)
}

// ParseRequest parses the header file. As paramChunkAdd has no fields with the
// tag header, this method does nothing, except calling ProcessParameter()
func (p *paramChunkAdd) ParseRequest(r *http.Request) error {
	return p.ProcessParameter(r)
}

// ParseRequest reads r and saves the passed header values in the paramChunkComplete struct
// In the end, ProcessParameter() is called
func (p *paramChunkComplete) ParseRequest(r *http.Request) error {
	var err error
	p.foundHeaders = make(map[string]bool)
	p.Uuid, err = parseHeaderString(r, "uuid", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header uuid supplied")
	}

	p.FileName, err = parseHeaderString(r, "filename", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header filename supplied")
	}

	p.FileSize, err = parseHeaderInt64(r, "filesize", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header filesize supplied")
	}

	p.RealSize, err = parseHeaderInt64(r, "realsize", true, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header realsize supplied")
	}

	p.ContentType, err = parseHeaderString(r, "contenttype", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header contenttype supplied")
	}

	p.AllowedDownloads, err = parseHeaderInt(r, "allowedDownloads", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header allowedDownloads supplied")
	}

	p.ExpiryDays, err = parseHeaderInt(r, "expiryDays", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header expiryDays supplied")
	}

	p.Password, err = parseHeaderString(r, "password", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header password supplied")
	}

	p.IsE2E, err = parseHeaderBool(r, "isE2E", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header isE2E supplied")
	}

	p.IsNonBlocking, err = parseHeaderBool(r, "nonblocking", false, p.foundHeaders)
	if err != nil {
		return fmt.Errorf("invalid value in header nonblocking supplied")
	}

	return p.ProcessParameter(r)
}
